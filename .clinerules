# Project Context for Cline Agents

## Project Type

This is a Nuxt 3 + Supabase project using TypeScript

## Key Directories

- /app: Main application directory
    - /assets: Project assets (images, videos, CSS)
        - /img: Image assets including logo
        - /videos: Video assets with subtitles
        - /css: Global styles
    - /components: Vue components organized by feature
    - /pages: Application routes
    - /types: TypeScript type definitions
        - /types/supabase.ts: Database schema types
        - /types/index.ts: Central type exports
- /server: Server-side TypeScript configuration
- /supabase: Local Supabase instance configuration
    - /supabase/volumes/db/init/*.sql: Initial database schema definitions
- /public: Static assets

## Component Organization

- SiteHeader: Main navigation and search
- HomeHero: Hero section with side-by-side video and content
- ProjectsList: Grid display of projects from Supabase
- FeaturedProjects: Featured projects grid for homepage
- GetInvolved: Call-to-action section with engagement options
- SiteFooter: Site navigation and links

## Critical Files

- app/app.config.ts: UI theme configuration
- app/app.vue: Main application entry point
- app/assets/css/main.css: Global styles
- nuxt.config.ts: Nuxt configuration
- supabase/.env: Local Supabase configuration (copy from .env.example)
- tsconfig.json: TypeScript configuration
- .env: Frontend environment variables (base64 encoded in GitHub secrets)
- supabase/seed.sql: Contains test data for development

## Development Requirements

- Node.js is managed via asdf (.tool-versions)
- Supabase requires Docker for local development
- Environment setup requires:
    1. Copying supabase/.env.example to supabase/.env (ONLY if .env doesn't exist)
    2. Setting up .env with frontend configuration

## Deployment

- Static site generation using `npm run generate`
- Automated deployment to GitHub Pages via Actions workflow
- Environment variables handled through FRONTEND_ENV_BASE64 secret
- Custom domain configured through CNAME

## Data Models and Supabase Integration

### Backend Schema (supabase/volumes/db/init/*.sql)

- Database schema defined in SQL migration files
- Key tables:
    - projects: Core project information
    - tags: Reusable tags for projects
    - project_tags: Many-to-many relationship
- Enums:
    - project_stage: Project lifecycle stages
    - tag_class: Tag categories (tech, topic, event)

### Test Data (supabase/seed.sql)

Before implementing features, always examine seed.sql to understand:

- Available test data for development
- Data relationships and structure
- Example values for each field
- Tag categories and their usage
- Project stages and their values

For example, seed.sql contains:

- 20 sample projects with varied stages and relationships
- Tech tags (JavaScript, Python, React, etc.)
- Topic tags (Civic Engagement, Education, etc.)
- Event tags (Civic Hackathon 2024, Code Sprint 2024)
- Project-tag relationships showing proper usage

### Frontend Types (types/supabase.ts)

- TypeScript types mirror the database schema
- Key types:
    - Project: Base project attributes
    - Tag: Tag metadata
    - ProjectTag: Junction table type
    - ProjectWithTags: Extended project with nested tags
    - Database: Complete Supabase schema type

### Auto-imports in Nuxt

1. Components are auto-imported:

   ```vue
   <template>
     <!-- No import needed for components -->
     <ProjectsList />
     <FeaturedProjects />
     <HomeHero />
   </template>
   ```

2. Composables and Vue utilities are auto-imported:

   ```typescript
   // Only need to import types - everything else is auto-imported
   import type { Project, Database } from '~/types/supabase'

   // These are auto-imported by Nuxt:
   // - ref()
   // - computed()
   // - useSupabaseClient()
   // - useLazyAsyncData()
   // - definePageMeta()
   // and many more...

   const searchQuery = ref('')  // no import needed
   const client = useSupabaseClient<Database>()  // no import needed
   ```

3. Using Supabase client with auto-imports:

   ```typescript
   // Type-safe Supabase client
   const client = useSupabaseClient<Database>()

   // Async data fetching
   const { data, pending, error } = await useLazyAsyncData<Project[]>('key', async () => {
     const { data, error } = await client
       .from('projects')
       .select('*')
     if (error) throw error
     return data
   })
   ```

   Note: Ignore Vetur errors about top-level await - this is supported in Nuxt 3.

4. Handling nested relationships:

   ```typescript
   // Example: Fetching projects with tags
   .from('projects')
   .select(`
     *,
     project_tags (
       tags (
         id,
         title,
         class
       )
     )
   `)
   ```

### Best Practices

- Leverage Nuxt's auto-imports to keep components clean
- Only import types explicitly - let Nuxt handle the rest
- Transform data after fetching to match frontend needs
- Use type predicates for filtering:

  ```typescript
  .filter((tag): tag is Tag => tag.class === 'tech')
  ```

- Handle loading and error states consistently
- Use computed properties for filtered data
- Keep database types in sync with Supabase schema

## Important Considerations

- Always ensure Supabase Docker containers are running before development
- The application runs on port 3000, Supabase on port 8000
- TypeScript is used throughout the project
- Changes to Supabase configuration require Docker container restart
- Components follow a modular design pattern with clear separation of concerns
- Video and image assets are stored in /assets directory and referenced using ~/assets path
- NEVER overwrite existing .env files with .env.example - they may contain important local configuration
- ALWAYS examine seed.sql before implementing features to understand available test data

### Page Routing and Navigation

- ALWAYS use the /coming-soon/[page] route for links to pages that don't exist yet:
    - The route automatically displays a "Coming Soon" message with the page name
    - Example: Use `/coming-soon/about` instead of `/about` for unimplemented pages
    - Exception: Keep direct links for implemented pages (e.g., `/projects`)
    - This helps users understand which features are available vs. in development

### UI Theme Configuration

The project uses Nuxt UI with a custom theme defined in `app/app.config.ts`:

- Colors:
    - Primary: blue (for main actions)
    - Secondary: green (for secondary actions)
    - CTA: red (for calls-to-action and emphasis)
    - Error: red (only for actual error states)
    - Neutral: slate (for secondary elements)

### Color Usage

When applying colors, use the appropriate syntax:

1. For Nuxt UI components, use the color prop:

    ```vue
    <!-- Buttons -->
    <UButton color="primary" />  <!-- Main actions -->
    <UButton color="secondary" />  <!-- Secondary actions -->
    <UButton color="cta" />      <!-- Call-to-action -->
    <UButton color="error" />    <!-- Error states -->
    <UButton color="neutral" />  <!-- Secondary actions -->

    <!-- Alerts -->
    <UAlert color="error" />     <!-- Only for actual errors -->

    <!-- Button variants -->
    <UButton variant="solid" />  <!-- Default, filled button -->
    <UButton variant="outline" /> <!-- Outlined button -->
    <UButton variant="link" />   <!-- Link-style button -->
    ```

2. For text colors on HTML elements, use CSS variables:

    ```vue
    <!-- Headings -->
    <h3>Regular heading</h3>
    <h3 class="text-(--ui-cta)">Call to Action</h3>

    <!-- Regular text -->
    <p>Regular content</p>
    <p class="text-(--ui-primary)">Highlighted primary text</p>
    <p class="text-(--ui-cta)">Call to action text</p>
    ```

3. For dark backgrounds, override color variables:

    ```vue
    <!-- Example: White text in dark header -->
    <header class="bg-gray-900 [--ui-primary:theme(colors.white)]">
      <UButton color="primary" variant="link">White Link</UButton>
    </header>
    ```

### Layout Structure

1. Main Layout:

    ```vue
    <!-- app.vue -->
    <UApp>
      <div class="min-h-screen bg-white flex flex-col">
        <SiteHeader />
        <main class="flex-grow py-12">
          <NuxtPage />
        </main>
        <SiteFooter />
      </div>
    </UApp>
    ```

2. Page Layout:

    ```vue
    <UContainer class="py-12">
      <!-- Page content -->
    </UContainer>
    ```

3. Navigation:

    ```vue
    <!-- Header navigation -->
    <UButton
      variant="link"
      color="primary"
      label="NAVIGATION ITEM"
    />

    <!-- Footer navigation -->
    <UButton
      variant="link"
      color="cta"
      label="FOOTER LINK"
      class="block"
    />
    ```

4. Loading States:

    ```vue
    <!-- Loading state with progress indicator -->
    <div class="text-center py-12">
      <UProgress class="mx-auto" indeterminate />
      <p class="mt-2 text-gray-600">Loading...</p>
    </div>
    ```

5. Form Elements:

    ```vue
    <!-- Search input -->
    <UInput
      placeholder="Search"
      icon="i-lucide-search"
      size="sm"
      color="primary"
      variant="outline"
    />
    ```

2. Headings:

    ```vue
    <!-- Main heading -->
    <h2 class="text-3xl font-bold text-center mb-12">
      PAGE TITLE
    </h2>

    <!-- Section heading -->
    <h3 class="font-bold mb-2">
      Section Title
    </h3>
    ```

3. Grid Layouts:

    ```vue
    <!-- Basic grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">

    <!-- Custom ratio grid (e.g., 7:4 with 1 gap) -->
    <div class="grid grid-cols-12 gap-8">
      <div class="col-span-12 lg:col-span-7">Main content</div>
      <div class="col-span-12 lg:col-span-4">Sidebar</div>
    </div>
    ```

4. Cards:

    ```vue
    <UCard class="hover:shadow-md transition-all duration-200">
      <!-- Card content -->
    </UCard>
    ```

5. Icons:

    ```vue
    <!-- Icon with color -->
    <div class="text-(--ui-cta)">
      <UIcon
        name="i-lucide-heart"
        class="h-16 w-16"
      />
    </div>
    ```

6. Spacing:
    - Vertical section spacing: py-12 or py-16
    - Grid gaps: gap-8
    - Text spacing: space-y-4
    - Card padding: default UCard padding

### Component Examples

1. Hero Section:

    ```vue
    <UContainer class="py-12">
      <div class="grid grid-cols-12 gap-8">
        <div class="col-span-12 lg:col-span-7">
          <!-- Main content -->
        </div>
        <div class="col-span-12 lg:col-span-4">
          <h2 class="text-2xl font-bold text-(--ui-primary)">
            Main Message
          </h2>
          <p class="text-xl text-(--ui-cta)">
            Supporting Message
          </p>
          <UButton
            icon="i-lucide-heart"
            label="Call to Action"
            color="cta"
            size="lg"
          />
        </div>
      </div>
    </UContainer>
    ```

2. Card Grid:

    ```vue
    <UContainer class="py-12">
      <h2 class="text-3xl font-bold text-center mb-12 text-(--ui-primary)">
        SECTION TITLE
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <UCard v-for="item in items" :key="item.id">
          <div class="text-(--ui-cta) mb-4">
            <UIcon :name="item.icon" class="h-16 w-16 mx-auto" />
          </div>
          <h3 class="font-bold mb-2">{{ item.title }}</h3>
          <p class="text-sm text-gray-600">{{ item.description }}</p>
        </UCard>
      </div>
    </UContainer>
    ```

- Use Lucide icons for buttons and UI elements:
    - Format: `i-lucide-{icon-name}`
    - Common icons:
        - Navigation: arrow-left, arrow-right, home, menu
        - Actions: plus, edit, trash, save, settings
        - Content: file, folder, image, link
        - UI: search, close, check, x
        - Social: github, twitter, mail

- Use UGrid for responsive layouts:

    ```vue
    <UGrid :cols="[1, 2, 3]" gap="4">
      <div>Column 1</div>
      <div>Column 2</div>
      <div>Column 3</div>
    </UGrid>
    ```

- Use consistent spacing with Nuxt UI utilities:
    - Section spacing: class="space-y-8"
    - Card padding: default UCard padding
    - Grid gaps: gap="4" or gap="6"
    - Form spacing: class="space-y-4"

- Use Nuxt UI form components:

    ```vue
    <UForm>
      <UFormGroup label="Name">
        <UInput v-model="name" />
      </UFormGroup>
    </UForm>
    ```

### Content Examination

- When examining any codeforphilly.org URL, ALWAYS use the puppeteer screenshot command first:

    ```bash
    # REQUIRED: Capture full-resolution screenshot before examining any codeforphilly.org URL
    puppeteer screenshot --viewport 1280x720 <url> .scratch/<descriptive-name>.png

    # Examples:
    puppeteer screenshot --viewport 1280x720 https://codeforphilly.org/ .scratch/home.png
    puppeteer screenshot --viewport 1280x720 https://codeforphilly.org/projects .scratch/projects.png
    puppeteer screenshot --viewport 1280x720 https://codeforphilly.org/projects/neighborhood-safety .scratch/project-details.png
    ```

    Then examine the saved image to ensure accurate replication at desktop resolution
